// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/esvarez/game-nest-service/entity"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Find provides a mock function with given fields: key
func (_m *Repository) Find(key string) (*entity.Game, error) {
	ret := _m.Called(key)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(string) *entity.Game); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]*entity.Game, error) {
	ret := _m.Called()

	var r0 []*entity.Game
	if rf, ok := ret.Get(0).(func() []*entity.Game); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: item
func (_m *Repository) Set(item *entity.Game) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Game) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
