// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/esvarez/game-nest-service/service/boardgame/dto"
	entity "github.com/esvarez/game-nest-service/service/boardgame/entity"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *UseCase) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: key
func (_m *UseCase) Find(key string) (*entity.BoardGame, error) {
	ret := _m.Called(key)

	var r0 *entity.BoardGame
	if rf, ok := ret.Get(0).(func(string) *entity.BoardGame); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BoardGame)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindGameUrl provides a mock function with given fields: url
func (_m *UseCase) FindGameUrl(url string) (*entity.BoardGame, error) {
	ret := _m.Called(url)

	var r0 *entity.BoardGame
	if rf, ok := ret.Get(0).(func(string) *entity.BoardGame); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BoardGame)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *UseCase) GetAll() ([]*entity.BoardGame, error) {
	ret := _m.Called()

	var r0 []*entity.BoardGame
	if rf, ok := ret.Get(0).(func() []*entity.BoardGame); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.BoardGame)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: item
func (_m *UseCase) Save(item *dto.BoardGame) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.BoardGame) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: key, value
func (_m *UseCase) Update(key *entity.BoardGame, value *entity.BoardGame) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.BoardGame, *entity.BoardGame) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t testing.TB) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
