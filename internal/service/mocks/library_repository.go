// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/esvarez/game-nest-service/internal/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/esvarez/game-nest-service/internal/model"

	testing "testing"
)

// LibraryRepository is an autogenerated mock type for the LibraryRepository type
type LibraryRepository struct {
	mock.Mock
}

// AddBoardGame provides a mock function with given fields: library
func (_m *LibraryRepository) AddBoardGame(library *dto.Library) error {
	ret := _m.Called(library)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.Library) error); ok {
		r0 = rf(library)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBoardGames provides a mock function with given fields: id
func (_m *LibraryRepository) GetBoardGames(id string) (*model.UserInfo, error) {
	ret := _m.Called(id)

	var r0 *model.UserInfo
	if rf, ok := ret.Get(0).(func(string) *model.UserInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLibraryRepository creates a new instance of LibraryRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewLibraryRepository(t testing.TB) *LibraryRepository {
	mock := &LibraryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
